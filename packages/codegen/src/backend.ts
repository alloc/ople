import endent from 'endent'
import redent from 'redent'
import { Node } from 'ts-morph'
import {
  findReferencedTypes,
  mergeIntoSet,
  printImport,
  printJSDocs,
} from './common'
import { OpleParser } from './parser'
import { warn } from './warnings'

export function printBackendModule(parser: OpleParser) {
  const { collections } = parser
  const referencedTypes = new Set<Node>()

  const documentTypes: string[] = []
  const collectionTypes: string[] = []
  for (const coll of Object.values(collections)) {
    let type = coll.name + ': '
    if (coll.type) {
      findReferencedTypes(coll.type, referencedTypes)
      documentTypes.push(type + coll.type.getText())
    } else {
      documentTypes.push(type + 'any')
    }
    // TODO: allow defining the collection's metadata type
    collectionTypes.push(type + 'any')
  }

  const signals = Object.values(parser.signals)
  const signalTypes = signals.map(signal => {
    mergeIntoSet(referencedTypes, signal.referencedTypes)
    return printJSDocs(signal.node) + signal.node.getText()
  })

  const opleBackendId = '@ople/backend'
  const imports: Record<string, string[]> = { [opleBackendId]: [] }
  const userProps: string[] = []
  const printedTypes: string[] = []
  const typeNames = new Set<string>()

  referencedTypes.forEach(type => {
    findReferencedTypes(type, referencedTypes)
    if (!Node.isNamedNode(type)) {
      return
    }
    const name = type.getName()
    if (/^Ople(Ref|Time|Date|Document)$/.test(name)) {
      return // These are globally declared.
    }
    if (name == 'User') {
      if (Node.isInterfaceDeclaration(type)) {
        for (const prop of type.getProperties()) {
          userProps.push(printJSDocs(prop) + prop.getText())
        }
      } else {
        warn(type, `"User" type must be an interface`)
      }
    } else {
      const moduleInfo = parser.dependencies.get(type.getSourceFile())
      if (moduleInfo) {
        const vars = (imports[moduleInfo.id] ??= [])
        if (!vars.includes(name)) {
          if (typeNames.has(name)) {
            warn(type, `Type skipped. Name already taken: "${name}"`)
          } else {
            vars.push(name)
          }
        }
      } else if (typeNames.has(name)) {
        warn(type, `Type skipped. Name already taken: "${name}"`)
      } else {
        typeNames.add(name)
        printedTypes.push(redent(type.getFullText(), 0).trim())
      }
    }
  })

  return endent`
    /**
     * DO NOT EDIT THIS DIRECTLY!
     * Generated by @ople/codegen
     */
    ${Object.entries(imports).map(printImport).join('\n')}

    declare module "@ople/backend" {
      export interface Signals {
        ${signalTypes.join('\n')}
      }
      export interface User {
        ${userProps.join('\n')}
      }
      export interface OpleDocuments {
        ${documentTypes.join('\n')}
      }
      export interface OpleCollections {
        ${collectionTypes.join('\n')}
      }
    }

    ${printedTypes.join('\n\n')}
  `
}
