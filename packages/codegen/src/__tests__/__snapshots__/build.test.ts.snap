// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`queries declare variable 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[],\\"expr\\":{\\"let\\":[{\\"a\\":1}],\\"in\\":null}}",
  },
}
`;

exports[`queries early return 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[],\\"expr\\":1}",
  },
}
`;

exports[`queries export function 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[],\\"expr\\":null}",
  },
}
`;

exports[`queries if blocks else return 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[],\\"expr\\":{\\"if\\":true,\\"then\\":2,\\"else\\":1}}",
  },
}
`;

exports[`queries if blocks empty then 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[],\\"expr\\":{\\"do\\":[{\\"if\\":true,\\"then\\":null,\\"else\\":null},null]}}",
  },
}
`;

exports[`queries if blocks non-boolean condition 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[\\"arg\\"],\\"expr\\":{\\"do\\":[{\\"if\\":{\\"call\\":\\"CastToBool\\",\\"arguments\\":{\\"var\\":\\"arg\\"}},\\"then\\":null,\\"else\\":null},null]}}",
  },
}
`;

exports[`queries if blocks then return 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[],\\"expr\\":{\\"if\\":true,\\"then\\":1,\\"else\\":2}}",
  },
}
`;

exports[`queries literal values 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "{\\"lambda\\":[],\\"expr\\":{\\"do\\":[true,false,\\"string\\",null,123,null]}}",
  },
}
`;

exports[`queries operators algebraic operators 1`] = `
Array [
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"add\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"subtract\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"multiply\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"divide\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"modulo\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
]
`;

exports[`queries operators bitwise operators 1`] = `
Array [
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"bitand\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"bitor\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"bitxor\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"bitnot\\":{\\"var\\":\\"a\\"}}}",
    },
  },
]
`;

exports[`queries operators comparison operators 1`] = `
Array [
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"gt\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"gte\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"lt\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"lte\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "{\\"lambda\\":[\\"a\\",\\"b\\"],\\"expr\\":{\\"equals\\":[{\\"var\\":\\"a\\"},{\\"var\\":\\"b\\"}]}}",
    },
  },
]
`;

exports[`queries operators strict equals 1`] = `"Unsupported operator: ==="`;

exports[`queries unknown identifier 1`] = `"Unknown identifier: \\"lol\\""`;
