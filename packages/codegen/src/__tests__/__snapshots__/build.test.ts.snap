// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`queries arrays length 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([\\"arg\\"],Count(Var(\\"arg\\")))",
  },
}
`;

exports[`queries declare variable 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([],Let([{a:1}],null))",
  },
}
`;

exports[`queries early return 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([],1)",
  },
}
`;

exports[`queries export function 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([],null)",
  },
}
`;

exports[`queries if blocks else return 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([],If(true,2,1))",
  },
}
`;

exports[`queries if blocks empty then 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([],Do(If(true,null,null),null))",
  },
}
`;

exports[`queries if blocks non-boolean condition 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([\\"arg\\"],Do(If(Call(\\"CastToBool\\",Var(\\"arg\\")),null,null),null))",
  },
}
`;

exports[`queries if blocks then return 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([],If(true,1,2))",
  },
}
`;

exports[`queries literal values 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([],Do(true,false,\\"string\\",null,123,null))",
  },
}
`;

exports[`queries objects nested property 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([\\"obj\\"],Select([\\"a\\",\\"b\\"],Var(\\"obj\\")))",
  },
}
`;

exports[`queries objects single property 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([\\"obj\\"],Select(\\"a\\",Var(\\"obj\\")))",
  },
}
`;

exports[`queries operators algebraic operators 1`] = `
Array [
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Add(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Subtract(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Multiply(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Divide(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Modulo(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
]
`;

exports[`queries operators bitwise operators 1`] = `
Array [
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Bitand([Var(\\"a\\"),Var(\\"b\\")]))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Bitor([Var(\\"a\\"),Var(\\"b\\")]))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Bitxor([Var(\\"a\\"),Var(\\"b\\")]))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Bitnot(Var(\\"a\\")))",
    },
  },
]
`;

exports[`queries operators comparison operators 1`] = `
Array [
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],GT(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],GTE(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],LT(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],LTE(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Equals(Var(\\"a\\"),Var(\\"b\\")))",
    },
  },
]
`;

exports[`queries operators not operator 1`] = `
Array [
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Not(Call(\\"CastToBool\\",Var(\\"a\\"))))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Not(GT(Var(\\"a\\"),0)))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Not(Call(\\"CastToBool\\",Add(Var(\\"a\\"),Var(\\"b\\")))))",
    },
  },
  Object {
    "foo": Object {
      "name": "foo",
      "query": "Lambda([\\"a\\",\\"b\\"],Call(\\"CastToBool\\",Var(\\"a\\")))",
    },
  },
]
`;

exports[`queries operators strict equals 1`] = `"Unsupported operator: ==="`;

exports[`queries strings length 1`] = `
Object {
  "foo": Object {
    "name": "foo",
    "query": "Lambda([\\"arg\\"],Length(Var(\\"arg\\")))",
  },
}
`;

exports[`queries unknown identifier 1`] = `"Unknown identifier: \\"lol\\""`;
