/**
 * DO NOT EDIT THIS DIRECTLY!
 * Generated by @ople/codegen
 */
import { defineBackend, OpleProtocol, OpleListener, OpleRefLike, OplePage, makeCreator, OpleRef } from "@ople/client"

interface Functions {
  signUp(name: string, password: string): Promise<User>
  login(name: string, password: string): Promise<User>
  logout(): Promise<void>
  promote(ref: OpleRefLike<User>, secret?: string | undefined): Promise<void>
  ban(ref: OpleRefLike<User>, banned?: boolean): Promise<void>
  like(target: OpleRefLike<Likeable>, liked?: boolean): Promise<void>
  loadPosts(pageOptions?: OplePage.Options): Promise<OplePage<Post>>
  loadReplies(parentRef: OpleRefLike<Reply> | OpleRefLike<Post>, pageOptions?: OplePage.Options): Promise<OplePage<Reply>>
  publish(props: { text: string; }): Promise<Post>
  reply(props: { text: string; }, to: OpleRefLike<Reply> | OpleRefLike<Post>): Promise<Reply>
}

interface Signals {
  onReply(handler: (ref: OpleRef<Post> | OpleRef<Reply>, reply: Reply) => boolean | void): OpleListener
  onReply(target: OpleRefLike<Post> | OpleRefLike<Reply>, handler: (reply: Reply) => boolean | void): OpleListener
}

declare const console: any

const backend = defineBackend<Functions, Signals>({
  onError: console.error,
  protocol: OpleProtocol.ws,
  url: "ws://localhost:3000/@ople-dev",
})

export default backend

const { functions, signals } = backend

export const signUp = functions.signUp
export const login = functions.login
export const logout = functions.logout
export const promote = functions.promote
export const ban = functions.ban
export const like = functions.like
export const loadPosts = functions.loadPosts
export const loadReplies = functions.loadReplies
export const publish = makeCreator(functions.publish, "text")
export const reply = makeCreator(functions.reply, "text")

export const onReply = signals.onReply

export interface User {
  name: string
  password: string
  banned?: boolean
  admin?: boolean
}

export interface Post {
  text: string
  author: OpleRef<User>
}

export interface Reply {
  text: string
  author: OpleRef<User>
  parent?: OpleRef<Reply>
  post: OpleRef<Post>
  likes: number
}

interface Like {
  author: OpleRef<User>
  target: OpleRef
}

type Likeable = { likes: number }